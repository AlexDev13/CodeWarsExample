// package codewars

// import (
// 	"regexp"
// 	"fmt"
// 	"strings"
// )


// func IsPalindromic(value string) bool {
// 	value = sanitize(value)
// 	fmt.Println(value)
//     for i := 0; i < len(value)/2; i++ {
//         if value[i] != value[len(value)-i-1] {
// 			fmt.Println(false)
// 			return false
// 			strings.Replace()
//         }
// 	}
// 	fmt.Print(true)
//     return true
// }

// func sanitize(value string) string {
//     reg, _ := regexp.Compile("[^A-Za-z0-9]+")
//     safe := reg.ReplaceAllString(value, "")
//     return strings.ToLower(strings.Trim(safe, ""))
// }


// // import "unicode"

// // func IsPalindrome(str string) bool {

// //   runes := []rune(str)

// //   for i := 0; i < (len(runes) / 2); i++ {
// //     j := len(runes) - i - 1

// //     left := runes[i]
// //     right := runes[j]

// //     if unicode.ToLower(left) != unicode.ToLower(right) {
// //       return false
// //     }
// //   }

// //   return true
// // }


// // func IsPalindrome(str string) bool {
// // 	i := 0
// // 	j := len(str) - 1
	
// // 	for i < j {
// // 	   if str[i] == str[j] || isLetter(str[i]) && str[i] ^ str[j] == 32 {
// // 		 i++
// // 		 j--
// // 		 continue
// // 	   }
	   
// // 	   return false
// // 	}
	
// // 	return true
// //   }
  
// //   func isLetter(c byte) bool {
// // 	return 'A' <= c && c <= 'Z' || 'a' <= c && c <= 'z'
// //   }




import "strings"

func FindShort(s string) (c int) {
  for _, word := range strings.Fields(s) {
    if c == 0 || len(word) < c {
      c = len(word)
    }   
  }
  return c
}